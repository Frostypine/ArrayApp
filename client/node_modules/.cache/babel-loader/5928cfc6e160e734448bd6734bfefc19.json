{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nlet tasks = [];\nlet localTaskInfo = JSON.parse(localStorage.getItem(\"localTaskInfo\"));\n\nif (!localTaskInfo) {\n  localTaskInfo = {\n    loggedIn: false\n  };\n  localStorage.setItem(\"localTaskInfo\", JSON.stringify(localTaskInfo));\n}\n\nexport const taskSlice = createSlice({\n  name: \"tasks\",\n  initialState: {\n    tasks,\n    localTaskInfo\n  },\n  reducers: {\n    allTasks: (state, action) => {\n      state.tasks = action.payload; //  console.log(action.payload)\n    },\n    addTask: (state, action) => {\n      state.tasks.push(action.payload);\n\n      if (action.payload.password === \"\") {\n        state.localTaskInfo = {\n          task_id: action.payload._id,\n          loggedIn: false\n        };\n      }\n\n      if (action.payload.password !== \"\") {\n        state.localTaskInfo = {\n          task_id: action.payload._id,\n          loggedIn: true\n        };\n      }\n\n      localStorage.setItem(\"localTaskInfo\", JSON.stringify(state.localTaskInfo));\n    },\n    editTask: (state, action) => {},\n    removeTask: (state, action) => {\n      state.tasks.splice(state.tasks.findIndex(e => e._id === action.payload, 1));\n      localStorage.setItem(\"tasks\", JSON.stringify(state.tasks));\n    },\n    editTaskText: (state, action) => {\n      const index = state.tasks.findIndex(task => task._id === action.payload._id);\n      state.tasks[index].text = action.payload.text;\n    }\n  }\n});\nexport const {\n  allTasks,\n  addTask,\n  editTask,\n  removeTask,\n  editTaskText\n} = taskSlice.actions;\nexport const selectTasks = state => state.tasks.tasks;\nexport const selectLocalTaskInfo = state => state.tasks.localTaskInfo;\nexport default taskSlice.reducer;","map":{"version":3,"sources":["D:/Code/Git/Array/projects/arrayapp/client/src/state/taskSlice.js"],"names":["createSlice","tasks","localTaskInfo","JSON","parse","localStorage","getItem","loggedIn","setItem","stringify","taskSlice","name","initialState","reducers","allTasks","state","action","payload","addTask","push","password","task_id","_id","editTask","removeTask","splice","findIndex","e","editTaskText","index","task","text","actions","selectTasks","selectLocalTaskInfo","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n\r\nlet tasks = [];\r\n\r\nlet localTaskInfo = JSON.parse(localStorage.getItem(\"localTaskInfo\"));\r\n\r\nif (!localTaskInfo) {\r\n  localTaskInfo = {\r\n    loggedIn: false,\r\n  };\r\n  localStorage.setItem(\"localTaskInfo\", JSON.stringify(localTaskInfo));\r\n}\r\n\r\nexport const taskSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks,\r\n    localTaskInfo,\r\n  },\r\n  reducers: {\r\n    allTasks: (state, action) => {\r\n      state.tasks = action.payload;\r\n    //  console.log(action.payload)\r\n    },\r\n    \r\n    addTask: (state, action) => {\r\n      state.tasks.push(action.payload);\r\n      if (action.payload.password === \"\") {\r\n        state.localTaskInfo = { task_id: action.payload._id, loggedIn: false };\r\n      }\r\n      if (action.payload.password !== \"\") {\r\n        state.localTaskInfo = {\r\n          task_id: action.payload._id,\r\n          loggedIn: true,\r\n        };\r\n      }\r\n      localStorage.setItem(\r\n        \"localTaskInfo\",\r\n        JSON.stringify(state.localTaskInfo)\r\n      );\r\n    },\r\n    editTask: (state, action) => { },\r\n    removeTask: (state, action) => {\r\n      state.tasks.splice(\r\n        state.tasks.findIndex((e) => e._id === action.payload, 1)\r\n      );\r\n      localStorage.setItem(\"tasks\", JSON.stringify(state.tasks));\r\n    },\r\n   \r\n    editTaskText: (state, action) => {\r\n        const index = state.tasks.findIndex(\r\n          (task) => task._id === action.payload._id\r\n        );\r\n        state.tasks[index].text = action.payload.text;\r\n      },\r\n    },\r\n});\r\n\r\nexport const {\r\n  allTasks,\r\n  addTask,\r\n  editTask,\r\n  removeTask,\r\n  editTaskText,\r\n\r\n} = taskSlice.actions;\r\n\r\nexport const selectTasks = (state) => state.tasks.tasks;\r\nexport const selectLocalTaskInfo = (state) => state.tasks.localTaskInfo;\r\n\r\nexport default taskSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}