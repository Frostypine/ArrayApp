{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; //import { updateLesson } from \"../api/lessonAPI\";\n\nlet lessons = [];\nlet localLessonInfo = JSON.parse(localStorage.getItem(\"localLessonInfo\"));\n\nif (!localLessonInfo) {\n  localLessonInfo = {\n    loggedIn: false\n  };\n  localStorage.setItem(\"localLessonInfo\", JSON.stringify(localLessonInfo));\n}\n\nexport const lessonSlice = createSlice({\n  name: \"lessons\",\n  initialState: {\n    lessons,\n    localLessonInfo\n  },\n  reducers: {\n    allLessons: (state, action) => {\n      state.lessons = action.payload;\n    },\n    addLesson: (state, action) => {\n      state.lessons.push(action.payload);\n\n      if (action.payload.password === \"\") {\n        state.localLessonInfo = {\n          lesson_id: action.payload._id,\n          loggedIn: false\n        };\n      }\n\n      if (action.payload.password !== \"\") {\n        state.localLessonInfo = {\n          lesson_id: action.payload._id,\n          loggedIn: true\n        };\n      }\n\n      localStorage.setItem(\"localLessonInfo\", JSON.stringify(state.localLessonInfo));\n    },\n    editLesson: (state, action) => {},\n    removeLesson: (state, action) => {\n      state.lessons.splice(state.lessons.findIndex(e => e._id === action.payload, 1));\n      localStorage.setItem(\"lessons\", JSON.stringify(state.lessons));\n    },\n    // editLessonRead: (state, action) => {\n    //   const index = state.lessons.findIndex(\n    //     (lesson) => lesson._id === action.payload._id\n    //   );\n    //   state.lessons[index].read = action.payload.read;\n    // },\n    // editLessonPicture: (state, action) => {\n    //   const index = state.lessons.findIndex(\n    //     (lesson) => lesson._id === action.payload._id\n    //   );\n    //   state.lessons[index].avatar = action.payload.picture;\n    // },\n    //find a way to edit array or turn array into strings and have multiple \n    editLessonText: (state, action) => {\n      const index = state.lessons.findIndex(lesson => lesson._id === action.payload._id);\n      state.lessons[index].text = action.payload.text;\n    }\n  }\n});\nexport const {\n  allLessons,\n  addLesson,\n  editLesson,\n  removeLesson,\n  //editLessonRead,\n  editLessonText //editLessonPicture,\n\n} = lessonSlice.actions;\nexport const selectLessons = state => state.lessons.lessons;\nexport const selectLocalLessonInfo = state => state.lessons.localLessonInfo;\nexport default lessonSlice.reducer;","map":{"version":3,"sources":["D:/Code/Git/Array/projects/arrayapp/client/src/state/lessonSlice.js"],"names":["createSlice","lessons","localLessonInfo","JSON","parse","localStorage","getItem","loggedIn","setItem","stringify","lessonSlice","name","initialState","reducers","allLessons","state","action","payload","addLesson","push","password","lesson_id","_id","editLesson","removeLesson","splice","findIndex","e","editLessonText","index","lesson","text","actions","selectLessons","selectLocalLessonInfo","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n//import { updateLesson } from \"../api/lessonAPI\";\r\n\r\nlet lessons = [];\r\n\r\nlet localLessonInfo = JSON.parse(localStorage.getItem(\"localLessonInfo\"));\r\n\r\nif (!localLessonInfo) {\r\n  localLessonInfo = {\r\n    loggedIn: false,\r\n  };\r\n  localStorage.setItem(\"localLessonInfo\", JSON.stringify(localLessonInfo));\r\n}\r\n\r\nexport const lessonSlice = createSlice({\r\n  name: \"lessons\",\r\n  initialState: {\r\n    lessons,\r\n    localLessonInfo,\r\n  },\r\n  reducers: {\r\n    allLessons: (state, action) => {\r\n      state.lessons = action.payload;\r\n    },\r\n    \r\n    addLesson: (state, action) => {\r\n      state.lessons.push(action.payload);\r\n      if (action.payload.password === \"\") {\r\n        state.localLessonInfo = { lesson_id: action.payload._id, loggedIn: false };\r\n      }\r\n      if (action.payload.password !== \"\") {\r\n        state.localLessonInfo = {\r\n          lesson_id: action.payload._id,\r\n          loggedIn: true,\r\n        };\r\n      }\r\n      localStorage.setItem(\r\n        \"localLessonInfo\",\r\n        JSON.stringify(state.localLessonInfo)\r\n      );\r\n    },\r\n    editLesson: (state, action) => { },\r\n    removeLesson: (state, action) => {\r\n      state.lessons.splice(\r\n        state.lessons.findIndex((e) => e._id === action.payload, 1)\r\n      );\r\n      localStorage.setItem(\"lessons\", JSON.stringify(state.lessons));\r\n    },\r\n    // editLessonRead: (state, action) => {\r\n    //   const index = state.lessons.findIndex(\r\n    //     (lesson) => lesson._id === action.payload._id\r\n    //   );\r\n    //   state.lessons[index].read = action.payload.read;\r\n    // },\r\n\r\n    // editLessonPicture: (state, action) => {\r\n    //   const index = state.lessons.findIndex(\r\n    //     (lesson) => lesson._id === action.payload._id\r\n    //   );\r\n    //   state.lessons[index].avatar = action.payload.picture;\r\n    // },\r\n\r\n    //find a way to edit array or turn array into strings and have multiple \r\n    editLessonText: (state, action) => {\r\n        const index = state.lessons.findIndex(\r\n          (lesson) => lesson._id === action.payload._id\r\n        );\r\n        state.lessons[index].text = action.payload.text;\r\n      },\r\n    },\r\n});\r\n\r\nexport const {\r\n  allLessons,\r\n  addLesson,\r\n  editLesson,\r\n  removeLesson,\r\n  //editLessonRead,\r\n  editLessonText,\r\n  //editLessonPicture,\r\n} = lessonSlice.actions;\r\n\r\nexport const selectLessons = (state) => state.lessons.lessons;\r\nexport const selectLocalLessonInfo = (state) => state.lessons.localLessonInfo;\r\n\r\nexport default lessonSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}